import uuid
from abc import ABC
from datetime import datetime
from typing import Type

from pydantic import AnyHttpUrl, BaseModel, Field


class BaseVertical(BaseModel, ABC):
    """
    Base class for all verticals, except sub-verticals. Represents the verticals, or
    categories of data, that are supported by this library. Not all verticals are
    supported by every transfer service.
    """

    pardner_object_id: str = Field(
        default_factory=lambda: uuid.uuid4().hex,
        description='The id of the vertical object for identification from pardner. '
        'Differs from the service_generated_id, which is created by the service.',
    )
    service_object_id: str | None = Field(
        description='The id of the vertical object, generated by the service itself '
        'rather than pardner.',
        default=None,
    )

    creator_user_id: str | None = Field(
        description='The user who created the vertical. '
        'May or may not be the data owner. Generated by the service.',
        default=None,
    )
    data_owner_id: str = Field(
        description='The id of the user whose data the vertical object comes from. '
        'Generated by the service.'
    )
    service: str = Field(
        description='The name of the service the data was pulled from.'
    )
    vertical_name: str = Field(description='The name of the vertical, in snake case.')

    created_at: datetime | None = None
    url: AnyHttpUrl | None = None

    def __str__(self):
        return self.vertical_name


Vertical = Type[BaseVertical]
